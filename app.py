import streamlit as st
import os
import re
import json
from dotenv import load_dotenv
from database import DatabaseManager
from gemini_client import GeminiClient
from datetime import datetime

# Environment variables y√ºkle
load_dotenv()

# Sayfa konfig√ºrasyonu
st.set_page_config(
    page_title="AI Kod Edit√∂r√º",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS stilleri - Geli≈ütirilmi≈ü UI
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 15px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 8px 32px rgba(102, 126, 234, 0.3);
    }
    
    .main-header h1 {
        font-size: 2.5rem;
        margin-bottom: 0.5rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }
    
    .chat-container {
        background: #f8f9fa;
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
        box-shadow: 0 4px 16px rgba(0,0,0,0.1);
    }
    
    .user-message {
        background: transparent;
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
        border-left: 3px solid #007bff;
        animation: slideInRight 0.3s ease-out;
    }
    
    .ai-message {
        background: transparent;
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
        border-left: 3px solid #6c757d;
        animation: slideInLeft 0.3s ease-out;
    }
    
    @keyframes slideInRight {
        from { transform: translateX(100px); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    
    @keyframes slideInLeft {
        from { transform: translateX(-100px); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    
    .status-success {
        background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
        color: #155724;
        padding: 1rem;
        border-radius: 10px;
        border: 1px solid #c3e6cb;
        box-shadow: 0 2px 8px rgba(21, 87, 36, 0.1);
    }
    
    .status-error {
        background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
        color: #721c24;
        padding: 1rem;
        border-radius: 10px;
        border: 1px solid #f5c6cb;
        box-shadow: 0 2px 8px rgba(114, 28, 36, 0.1);
    }
    
    .code-block-container {
        position: relative;
        margin: 1rem 0;
    }
    
    .copy-button {
        position: absolute;
        top: 10px;
        right: 10px;
        background: #007bff;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 12px;
        z-index: 1000;
    }
    
    .copy-button:hover {
        background: #0056b3;
    }
    
    .theme-toggle {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
        background: #007bff;
        color: white;
        border: none;
        padding: 10px;
        border-radius: 50%;
        cursor: pointer;
        font-size: 16px;
        box-shadow: 0 4px 16px rgba(0,0,0,0.2);
    }
    
    .file-upload-area {
        border: 2px dashed #007bff;
        border-radius: 15px;
        padding: 2rem;
        text-align: center;
        background: linear-gradient(135deg, #f8f9ff 0%, #e6f3ff 100%);
        margin: 1rem 0;
        transition: all 0.3s ease;
    }
    
    .file-upload-area:hover {
        border-color: #0056b3;
        background: linear-gradient(135deg, #e6f3ff 0%, #cce7ff 100%);
    }
    
    .feature-card {
        background: white;
        padding: 1.5rem;
        border-radius: 15px;
        box-shadow: 0 4px 16px rgba(0,0,0,0.1);
        margin: 1rem 0;
        border-left: 5px solid #007bff;
        transition: transform 0.3s ease;
    }
    
    .feature-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 32px rgba(0,0,0,0.15);
    }
    
    .loading-spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid #f3f3f3;
        border-top: 3px solid #007bff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    .refactor-card {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        padding: 2rem;
        border-radius: 20px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.08);
        margin: 1.5rem 0;
        border: 1px solid #e9ecef;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }
    
    .refactor-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
    }
    
    .refactor-card:hover {
        transform: translateY(-8px);
        box-shadow: 0 16px 48px rgba(0,0,0,0.12);
    }
    
    .refactor-header {
        display: flex;
        align-items: center;
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #f1f3f4;
    }
    
    .refactor-icon {
        font-size: 2.5rem;
        margin-right: 1rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }
    
    .refactor-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: #2c3e50;
        margin: 0;
    }
    
    .refactor-description {
        color: #6c757d;
        font-size: 0.95rem;
        margin-top: 0.5rem;
        line-height: 1.6;
    }
    
    .analysis-result {
        background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
        border: 1px solid #dee2e6;
        border-radius: 15px;
        padding: 2rem;
        margin: 1.5rem 0;
        box-shadow: 0 4px 16px rgba(0,0,0,0.05);
    }
    
    .analysis-header {
        display: flex;
        align-items: center;
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid #e9ecef;
    }
    
    .analysis-icon {
        font-size: 1.8rem;
        margin-right: 0.8rem;
        color: #28a745;
    }
    
    .analysis-title {
        font-size: 1.3rem;
        font-weight: 600;
        color: #2c3e50;
        margin: 0;
    }
    
    .progress-container {
        background: #f8f9fa;
        border-radius: 10px;
        padding: 1rem;
        margin: 1rem 0;
        border-left: 4px solid #007bff;
    }
    
    .progress-text {
        color: #495057;
        font-weight: 500;
        margin-bottom: 0.5rem;
    }
    
    .progress-bar {
        width: 100%;
        height: 8px;
        background: #e9ecef;
        border-radius: 4px;
        overflow: hidden;
    }
    
    .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #007bff 0%, #0056b3 100%);
        border-radius: 4px;
        animation: progressAnimation 2s ease-in-out;
    }
    
    @keyframes progressAnimation {
        0% { width: 0%; }
        100% { width: 100%; }
    }
    
    .metric-card {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        text-align: center;
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        border: 1px solid #f1f3f4;
        transition: transform 0.2s ease;
    }
    
    .metric-card:hover {
        transform: translateY(-2px);
    }
    
    .metric-value {
        font-size: 2rem;
        font-weight: 700;
        color: #007bff;
        margin-bottom: 0.5rem;
    }
    
    .metric-label {
        color: #6c757d;
        font-size: 0.9rem;
        font-weight: 500;
    }
    
    .input-group {
        background: white;
        border-radius: 12px;
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: 0 2px 8px rgba(0,0,0,0.06);
        border: 1px solid #e9ecef;
    }
    
    .input-label {
        font-weight: 600;
        color: #495057;
        margin-bottom: 0.8rem;
        display: block;
    }
    
    .action-button {
        background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
        color: white;
        border: none;
        padding: 0.8rem 2rem;
        border-radius: 25px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 16px rgba(0, 123, 255, 0.3);
    }
    
    .action-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 24px rgba(0, 123, 255, 0.4);
    }
    
    .secondary-button {
        background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
        color: white;
        border: none;
        padding: 0.6rem 1.5rem;
        border-radius: 20px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        margin: 0.25rem;
    }
    
    .secondary-button:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(108, 117, 125, 0.3);
    }
    
    .success-alert {
        background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
        color: #155724;
        padding: 1rem 1.5rem;
        border-radius: 12px;
        border: 1px solid #c3e6cb;
        margin: 1rem 0;
        display: flex;
        align-items: center;
    }
    
    .success-alert::before {
        content: '‚úÖ';
        margin-right: 0.8rem;
        font-size: 1.2rem;
    }
    
    .warning-alert {
        background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
        color: #856404;
        padding: 1rem 1.5rem;
        border-radius: 12px;
        border: 1px solid #ffeaa7;
        margin: 1rem 0;
        display: flex;
        align-items: center;
    }
    
    .warning-alert::before {
        content: '‚ö†Ô∏è';
        margin-right: 0.8rem;
        font-size: 1.2rem;
    }
    
    .info-alert {
        background: linear-gradient(135deg, #d1ecf1 0%, #bee5eb 100%);
        color: #0c5460;
        padding: 1rem 1.5rem;
        border-radius: 12px;
        border: 1px solid #bee5eb;
        margin: 1rem 0;
        display: flex;
        align-items: center;
    }
    
    .info-alert::before {
        content: '‚ÑπÔ∏è';
        margin-right: 0.8rem;
        font-size: 1.2rem;
    }
</style>
""", unsafe_allow_html=True)

def detect_code_language(code_text):
    """Kod dilini otomatik tespit et"""
    code_lower = code_text.lower().strip()
    
    # Python patterns
    if any(keyword in code_lower for keyword in ['def ', 'import ', 'from ', 'class ', 'if __name__', 'print(', 'python']):
        return 'python'
    
    # JavaScript patterns
    elif any(keyword in code_lower for keyword in ['function ', 'const ', 'let ', 'var ', 'console.log', 'javascript', 'js', '=>']):
        return 'javascript'
    
    # HTML patterns
    elif any(keyword in code_lower for keyword in ['<html', '<div', '<body', '<head', '<!doctype', 'html']):
        return 'html'
    
    # CSS patterns
    elif any(keyword in code_lower for keyword in ['{', '}', 'css', 'style', 'color:', 'background:', 'margin:', 'padding:']):
        return 'css'
    
    # SQL patterns
    elif any(keyword in code_lower for keyword in ['select ', 'from ', 'where ', 'insert ', 'update ', 'delete ', 'create table', 'sql']):
        return 'sql'
    
    # JSON patterns
    elif code_text.strip().startswith('{') and code_text.strip().endswith('}'):
        return 'json'
    
    # Default
    return 'text'

def extract_and_highlight_code(text):
    """Metinden kod bloklarƒ±nƒ± √ßƒ±kar ve syntax highlighting uygula"""
    # Kod bloklarƒ±nƒ± bul (```kod``` formatƒ±nda)
    code_pattern = r'```(\w+)?\n(.*?)\n```'
    matches = re.findall(code_pattern, text, re.DOTALL)
    
    if matches:
        result_parts = []
        last_end = 0
        
        for match in re.finditer(code_pattern, text, re.DOTALL):
            # Kod bloƒüundan √∂nceki metni ekle
            result_parts.append(text[last_end:match.start()])
            
            language = match.group(1) if match.group(1) else detect_code_language(match.group(2))
            code_content = match.group(2)
            
            # Kod bloƒüunu syntax highlighting ile ekle
            result_parts.append({
                'type': 'code',
                'language': language,
                'content': code_content
            })
            
            last_end = match.end()
        
        # Son kƒ±sƒ±mdaki metni ekle
        result_parts.append(text[last_end:])
        
        return result_parts
    else:
        # Kod bloƒüu yoksa, inline kod par√ßalarƒ±nƒ± kontrol et
        inline_code_pattern = r'`([^`]+)`'
        if re.search(inline_code_pattern, text):
            return [{'type': 'text_with_inline_code', 'content': text}]
        else:
            return [{'type': 'text', 'content': text}]

def render_message_with_syntax_highlighting(content, message_type):
    """Mesajƒ± syntax highlighting ile render et"""
    parts = extract_and_highlight_code(content)
    
    message_class = "user-message" if message_type == "user" else "ai-message"
    icon = "üë§" if message_type == "user" else "ü§ñ"
    title = "Sen" if message_type == "user" else "AI Kod Edit√∂r√º"
    
    # Mesaj container'ƒ±nƒ± ba≈ülat
    st.markdown(f'<div class="{message_class}">', unsafe_allow_html=True)
    st.markdown(f'<strong>{icon} {title}:</strong>', unsafe_allow_html=True)
    
    # ƒ∞√ßeriƒüi g√∂ster
    for part in parts:
        if isinstance(part, dict):
            if part['type'] == 'code':
                # Copy button i√ßin unique ID
                code_id = f"code_{hash(part['content'])}"
                
                st.markdown(f"""
                <div class="code-block-container">
                    <button class="copy-button" onclick="copyToClipboard('{code_id}')">üìã Kopyala</button>
                </div>
                """, unsafe_allow_html=True)
                
                # Kod bloƒüunu g√∂ster
                st.code(part['content'], language=part['language'])
                
            elif part['type'] == 'text_with_inline_code':
                # Inline kod ile metni i≈üle
                inline_pattern = r'`([^`]+)`'
                text_parts = re.split(inline_pattern, part['content'])
                
                rendered_text = ""
                for i, text_part in enumerate(text_parts):
                    if i % 2 == 0:  # Normal metin
                        rendered_text += text_part
                    else:  # Inline kod
                        rendered_text += f'<code style="background-color: #f1f1f1; padding: 2px 4px; border-radius: 3px;">{text_part}</code>'
                
                st.markdown(rendered_text, unsafe_allow_html=True)
            else:
                # Normal metin
                st.markdown(part['content'])
        else:
            # String ise direkt g√∂ster
            if part.strip():  # Bo≈ü string deƒüilse
                st.markdown(part)
    
    # Mesaj container'ƒ±nƒ± kapat
    st.markdown('</div>', unsafe_allow_html=True)

def initialize_session_state():
    """Session state deƒüi≈ükenlerini ba≈ülat"""
    if 'db_manager' not in st.session_state:
        st.session_state.db_manager = None
    if 'gemini_client' not in st.session_state:
        st.session_state.gemini_client = GeminiClient()
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []
    if 'is_connected' not in st.session_state:
        st.session_state.is_connected = False
    if 'saved_api_key' not in st.session_state:
        st.session_state.saved_api_key = ''
    if 'uploaded_files' not in st.session_state:
        st.session_state.uploaded_files = []

def setup_database():
    """Veritabanƒ±nƒ± kur"""
    db_url = os.getenv('DATABASE_URL')
    if db_url:
        st.session_state.db_manager = DatabaseManager(db_url)
        if st.session_state.db_manager.connect():
            st.session_state.db_manager.create_tables()
            return True
    return False

def main():
    initialize_session_state()
    
    # Ana ba≈ülƒ±k
    st.markdown("""
    <div class="main-header">
        <h1>ü§ñ AI Kod Edit√∂r√º</h1>
        <p>Uzman seviyesinde kod yazma asistanƒ±nƒ±z</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar - Ayarlar
    with st.sidebar:
        st.header("‚öôÔ∏è Ayarlar")
        
        # API Key giri≈üi - kullanƒ±cƒ± manuel olarak girecek
        api_key = st.text_input(
            "Gemini API Key",
            type="password",
            placeholder="API anahtarƒ±nƒ±zƒ± buraya girin...",
            help="Gemini API anahtarƒ±nƒ±zƒ± https://makersuite.google.com/app/apikey adresinden alabilirsiniz"
        )
        
        model_name = st.selectbox(
            "Model Se√ßin",
            ["gemini-2.0-flash", "gemini-1.5-pro", "gemini-1.5-flash"],
            index=0
        )
        
        # Baƒülantƒ± testi
        if st.button("üîó Baƒülantƒ±yƒ± Test Et"):
            if api_key:
                with st.spinner("Baƒülantƒ± test ediliyor..."):
                    success, message = st.session_state.gemini_client.connect(api_key, model_name)
                    if success:
                        st.session_state.is_connected = True
                        st.markdown(f'<div class="status-success">‚úÖ {message}</div>', unsafe_allow_html=True)
                        
                        # Veritabanƒ±nƒ± kur
                        if setup_database():
                            st.success("üìä Veritabanƒ± baƒülantƒ±sƒ± ba≈üarƒ±lƒ±!")
                    else:
                        st.session_state.is_connected = False
                        st.markdown(f'<div class="status-error">‚ùå {message}</div>', unsafe_allow_html=True)
            else:
                st.error("L√ºtfen API key girin!")
        
        # Baƒülantƒ± durumu
        if st.session_state.is_connected:
            st.markdown('<div class="status-success">üü¢ Baƒülƒ±</div>', unsafe_allow_html=True)
        else:
            st.markdown('<div class="status-error">üî¥ Baƒülƒ± deƒüil</div>', unsafe_allow_html=True)
        
        st.markdown("---")
        
        # File Upload Section
        st.subheader("üìÅ Dosya Y√∂netimi")
        
        # Dosya y√ºkleme se√ßenekleri
        upload_option = st.radio(
            "Y√ºkleme t√ºr√º se√ßin:",
            ["üìÑ Tek/√áoklu Dosya", "üìÅ Klas√∂r ƒ∞√ßeriƒüi"],
            horizontal=True
        )
        
        if upload_option == "üìÑ Tek/√áoklu Dosya":
            # √áoklu dosya y√ºkleme
            uploaded_files = st.file_uploader(
                "Dosya(lar) y√ºkle",
                type=['py', 'js', 'html', 'css', 'cpp', 'java', 'go', 'rs', 'php', 'rb', 'swift', 'kt', 'ts', 'jsx', 'tsx', 'vue', 'sql', 'json', 'txt', 'md', 'yaml', 'yml', 'csv', 'log', 'ini', 'cfg', 'conf', 'xml'],
                accept_multiple_files=True,
                help="√áoklu dosya se√ßebilirsiniz. Desteklenen formatlar: Kod dosyalarƒ±, metin dosyalarƒ±, yapƒ±landƒ±rma dosyalarƒ±"
            )
            
            if uploaded_files:
                for uploaded_file in uploaded_files:
                    # Dosya zaten y√ºkl√º m√º kontrol et
                    existing_files = [f['name'] for f in st.session_state.uploaded_files]
                    if uploaded_file.name not in existing_files:
                        try:
                            file_content = uploaded_file.read().decode('utf-8')
                            st.session_state.uploaded_files.append({
                                'name': uploaded_file.name,
                                'content': file_content,
                                'type': uploaded_file.type,
                                'size': len(file_content)
                            })
                            st.success(f"‚úÖ {uploaded_file.name} y√ºklendi!")
                            
                            # Show file preview
                            with st.expander(f"üìÑ {uploaded_file.name} √∂nizleme"):
                                language = detect_code_language(file_content)
                                preview_content = file_content[:1000] + "..." if len(file_content) > 1000 else file_content
                                st.code(preview_content, language=language)
                        except UnicodeDecodeError:
                            st.error(f"‚ùå {uploaded_file.name} dosyasƒ± okunamadƒ± (desteklenmeyen format)")
        
        else:  # Klas√∂r i√ßeriƒüi y√ºkleme
            st.info("üí° **Klas√∂r Y√ºkleme ƒ∞pucu:** Klas√∂r√ºn√ºzdeki t√ºm dosyalarƒ± se√ßmek i√ßin:")
            st.markdown("""
            1. **Windows:** Klas√∂r√º a√ßƒ±n ‚Üí `Ctrl+A` ile t√ºm√ºn√º se√ßin ‚Üí S√ºr√ºkle-bƒ±rak yapƒ±n
            2. **Mac:** Klas√∂r√º a√ßƒ±n ‚Üí `Cmd+A` ile t√ºm√ºn√º se√ßin ‚Üí S√ºr√ºkle-bƒ±rak yapƒ±n
            3. **Alternatif:** Dosya se√ßicisinde `Ctrl/Cmd` tu≈üu ile √ßoklu se√ßim yapƒ±n
            """)
            
            # Klas√∂r benzeri √ßoklu dosya y√ºkleme
            folder_files = st.file_uploader(
                "Klas√∂r i√ßeriƒüini y√ºkle (t√ºm dosyalarƒ± se√ßin)",
                type=['py', 'js', 'html', 'css', 'cpp', 'java', 'go', 'rs', 'php', 'rb', 'swift', 'kt', 'ts', 'jsx', 'tsx', 'vue', 'sql', 'json', 'txt', 'md', 'yaml', 'yml', 'csv', 'log', 'ini', 'cfg', 'conf', 'xml'],
                accept_multiple_files=True,
                help="Klas√∂r√ºn√ºzdeki t√ºm dosyalarƒ± se√ßip y√ºkleyin. Proje yapƒ±sƒ± korunacaktƒ±r.",
                key="folder_upload"
            )
            
            if folder_files:
                uploaded_count = 0
                for uploaded_file in folder_files:
                    # Dosya zaten y√ºkl√º m√º kontrol et
                    existing_files = [f['name'] for f in st.session_state.uploaded_files]
                    if uploaded_file.name not in existing_files:
                        try:
                            file_content = uploaded_file.read().decode('utf-8')
                            st.session_state.uploaded_files.append({
                                'name': uploaded_file.name,
                                'content': file_content,
                                'type': uploaded_file.type,
                                'size': len(file_content),
                                'is_folder_content': True
                            })
                            uploaded_count += 1
                        except UnicodeDecodeError:
                            st.warning(f"‚ö†Ô∏è {uploaded_file.name} dosyasƒ± atlandƒ± (desteklenmeyen format)")
                
                if uploaded_count > 0:
                    st.success(f"‚úÖ {uploaded_count} dosya klas√∂r i√ßeriƒüi olarak y√ºklendi!")
                    
                    # Proje yapƒ±sƒ±nƒ± g√∂ster
                    if st.checkbox("üìÇ Proje yapƒ±sƒ±nƒ± g√∂ster"):
                        st.subheader("üìÅ Y√ºklenen Proje Yapƒ±sƒ±")
                        folder_files_list = [f for f in st.session_state.uploaded_files if f.get('is_folder_content', False)]
                        
                        # Dosya t√ºrlerine g√∂re grupla
                        file_types = {}
                        for file_info in folder_files_list:
                            ext = file_info['name'].split('.')[-1].lower() if '.' in file_info['name'] else 'other'
                            if ext not in file_types:
                                file_types[ext] = []
                            file_types[ext].append(file_info['name'])
                        
                        for ext, files in file_types.items():
                            with st.expander(f"üìÑ .{ext} dosyalarƒ± ({len(files)} adet)"):
                                for filename in sorted(files):
                                    st.text(f"  üìÑ {filename}")
        
        # Show uploaded files
        if st.session_state.uploaded_files:
            st.subheader("üìã Y√ºklenen Dosyalar")
            
            # ƒ∞statistikler
            total_files = len(st.session_state.uploaded_files)
            total_size = sum(f.get('size', 0) for f in st.session_state.uploaded_files)
            folder_files_count = len([f for f in st.session_state.uploaded_files if f.get('is_folder_content', False)])
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("üìÑ Toplam Dosya", total_files)
            with col2:
                st.metric("üìÅ Klas√∂r Dosyalarƒ±", folder_files_count)
            with col3:
                st.metric("üìä Toplam Boyut", f"{total_size:,} karakter")
            
            # T√ºm dosyalarƒ± temizle butonu
            if st.button("üóëÔ∏è T√ºm√ºn√º Temizle", help="T√ºm y√ºklenen dosyalarƒ± sil"):
                st.session_state.uploaded_files = []
                st.success("‚úÖ T√ºm dosyalar temizlendi!")
                st.rerun()
            
            # Dosya listesi - g√ºvenli silme i≈ülemi
            if 'file_to_delete' not in st.session_state:
                st.session_state.file_to_delete = None
                
            for i, file_info in enumerate(st.session_state.uploaded_files):
                col1, col2, col3 = st.columns([2, 1, 1])
                with col1:
                    file_size = file_info.get('size', 0)
                    size_text = f"({file_size:,} karakter)" if file_size > 0 else ""
                    folder_icon = "üìÅ" if file_info.get('is_folder_content', False) else "üìÑ"
                    st.text(f"{folder_icon} {file_info['name']} {size_text}")
                with col2:
                    if st.button("üëÅÔ∏è", key=f"view_{i}", help="Dosyayƒ± g√∂r√ºnt√ºle"):
                        with st.expander(f"üìÑ {file_info['name']}", expanded=True):
                            language = detect_code_language(file_info['content'])
                            preview_content = file_info['content'][:1000] + "..." if len(file_info['content']) > 1000 else file_info['content']
                            st.code(preview_content, language=language)
                with col3:
                    if st.button("üóëÔ∏è", key=f"delete_{i}", help="Dosyayƒ± sil"):
                        st.session_state.file_to_delete = i
            
            # Dosya silme i≈ülemi - g√ºvenli y√∂ntem
            if st.session_state.file_to_delete is not None:
                file_index = st.session_state.file_to_delete
                if 0 <= file_index < len(st.session_state.uploaded_files):
                    removed_file = st.session_state.uploaded_files.pop(file_index)
                    st.success(f"‚úÖ {removed_file['name']} silindi!")
                st.session_state.file_to_delete = None
                st.rerun()
        
        st.markdown("---")
        
        # Chat ge√ßmi≈üini temizle
        if st.button("üóëÔ∏è Ge√ßmi≈üi Temizle"):
            st.session_state.chat_history = []
            st.rerun()
        
        # Export chat history
        if st.session_state.chat_history and st.button("üíæ Ge√ßmi≈üi ƒ∞ndir"):
            chat_export = []
            for msg in st.session_state.chat_history:
                chat_export.append({
                    'role': msg['role'],
                    'content': msg['content'],
                    'timestamp': msg['timestamp'].isoformat()
                })
            
            st.download_button(
                label="üì• JSON olarak indir",
                data=json.dumps(chat_export, indent=2, ensure_ascii=False),
                file_name=f"chat_history_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )
    
    # Ana chat aray√ºz√º
    if st.session_state.is_connected:
        # Tabs for different features
        tab1, tab2, tab3, tab4 = st.tabs(["üí¨ Chat", "üìÅ Dosya Analizi", "üîß Kod Ara√ßlarƒ±", "üêõ Hata Analizi"])
        
        with tab1:
            st.header("üí¨ Chat Aray√ºz√º")
            
            # Chat ge√ßmi≈üini g√∂ster - Geli≈ütirilmi≈ü rendering
            chat_container = st.container()
            
            with chat_container:
                for message in st.session_state.chat_history:
                    render_message_with_syntax_highlighting(
                        message['content'], 
                        message['role']
                    )
            
            # Mesaj giri≈üi
            with st.form("chat_form", clear_on_submit=True):
                
                user_input = st.text_area(
                    "Kod yazma isteƒüinizi girin:",
                    placeholder="√ñrnek: Python ile bir web scraper yaz, React ile todo app olu≈ütur, SQL sorgu optimizasyonu yap...",
                    height=100
                )
                
                submit_button = st.form_submit_button("üì§ G√∂nder", use_container_width=True)
            
            # Mesaj i≈üleme
            if submit_button and user_input.strip():
                # Kullanƒ±cƒ± mesajƒ±nƒ± ekle
                st.session_state.chat_history.append({
                    'role': 'user',
                    'content': user_input,
                    'timestamp': datetime.now()
                })
                
                # AI yanƒ±tƒ± al
                with st.spinner("ü§ñ AI kod yazƒ±yor..."):
                    success, ai_response = st.session_state.gemini_client.generate_code_response(user_input)
                    
                    if success:
                        # AI yanƒ±tƒ±nƒ± ekle
                        st.session_state.chat_history.append({
                            'role': 'assistant',
                            'content': ai_response,
                            'timestamp': datetime.now()
                        })
                        
                        # Veritabanƒ±na kaydet
                        if st.session_state.db_manager:
                            token_count = st.session_state.gemini_client.get_token_count(user_input)
                            message_id = st.session_state.db_manager.save_message(
                                user_input, 
                                "user", 
                                int(token_count)
                            )
                            if message_id:
                                st.session_state.db_manager.save_knowledge(message_id, ai_response)
                    else:
                        st.error(f"Hata: {ai_response}")
                
                st.rerun()
        
        with tab2:
            st.header("üìÅ Dosya Analizi")
            
            if st.session_state.uploaded_files:
                selected_file = st.selectbox(
                    "Analiz edilecek dosyayƒ± se√ßin:",
                    options=range(len(st.session_state.uploaded_files)),
                    format_func=lambda x: st.session_state.uploaded_files[x]['name']
                )
                
                if selected_file is not None:
                    file_info = st.session_state.uploaded_files[selected_file]
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.subheader("üìÑ Dosya ƒ∞√ßeriƒüi")
                        language = detect_code_language(file_info['content'])
                        st.code(file_info['content'], language=language)
                    
                    with col2:
                        st.subheader("üîç Analiz Se√ßenekleri")
                        
                        if st.button("üêõ Kod ƒ∞ncelemesi"):
                            analysis_prompt = f"Bu {file_info['name']} dosyasƒ±nƒ± incele ve kod kalitesi, potansiyel hatalar, iyile≈ütirme √∂nerileri hakkƒ±nda detaylƒ± analiz yap:\n\n```\n{file_info['content']}\n```"
                            
                            with st.spinner("Kod analiz ediliyor..."):
                                success, analysis = st.session_state.gemini_client.generate_code_response(analysis_prompt)
                                if success:
                                    st.markdown("### üìä Analiz Sonucu")
                                    render_message_with_syntax_highlighting(analysis, 'assistant')
                        
                        if st.button("üìù Dok√ºmantasyon Olu≈ütur"):
                            doc_prompt = f"""Bu {file_info['name']} dosyasƒ± i√ßin kapsamlƒ± ve anla≈üƒ±lƒ±r dok√ºmantasyon olu≈ütur. 
                            
L√ºtfen a≈üaƒüƒ±daki formatta dok√ºmantasyon hazƒ±rla:

## üìã Dosya √ñzeti
- Dosyanƒ±n amacƒ± ve i≈ülevi
- Ana √∂zellikler

## üîß Fonksiyonlar ve Sƒ±nƒ±flar
- Her fonksiyon/sƒ±nƒ±f i√ßin a√ßƒ±klama
- Parametreler ve d√∂n√º≈ü deƒüerleri
- Kullanƒ±m √∂rnekleri

## üìñ Kullanƒ±m Kƒ±lavuzu
- Nasƒ±l kullanƒ±lƒ±r
- √ñrnek kod par√ßacƒ±klarƒ±
- Dikkat edilmesi gerekenler

## üîó Baƒüƒ±mlƒ±lƒ±klar
- Gerekli k√ºt√ºphaneler
- ƒ∞mport edilen mod√ºller

Kod dosyasƒ±:
```
{file_info['content']}
```

L√ºtfen teknik jargon kullanmak yerine anla≈üƒ±lƒ±r a√ßƒ±klamalar yap ve markdown formatƒ±nda d√ºzenli bir dok√ºmantasyon olu≈ütur."""

                            with st.spinner("Dok√ºmantasyon olu≈üturuluyor..."):
                                success, documentation = st.session_state.gemini_client.generate_code_response(doc_prompt)
                                if success:
                                    st.markdown("### üìö Dok√ºmantasyon")
                                    # Dok√ºmantasyon i√ßin √∂zel g√∂r√ºnt√ºleme - JSON formatƒ±nƒ± √∂nlemek i√ßin direkt markdown kullan
                                    st.markdown(documentation)
                        
                        if st.button("üîß Refactoring √ñnerileri"):
                            refactor_prompt = f"Bu {file_info['name']} dosyasƒ± i√ßin refactoring √∂nerileri ve iyile≈ütirilmi≈ü kod versiyonu sun:\n\n```\n{file_info['content']}\n```"
                            
                            with st.spinner("Refactoring √∂nerileri hazƒ±rlanƒ±yor..."):
                                success, refactoring = st.session_state.gemini_client.generate_code_response(refactor_prompt)
                                if success:
                                    st.markdown("### ‚ö° Refactoring √ñnerileri")
                                    render_message_with_syntax_highlighting(refactoring, 'assistant')
            else:
                st.info("üìÅ Analiz i√ßin √∂nce bir dosya y√ºkleyin.")
        
        with tab3:
            st.header("üîß Geli≈ümi≈ü Kod Ara√ßlarƒ±")
            
            # Modular Refactoring Section
            st.markdown("""
            <div class="refactor-card">
                <div class="refactor-header">
                    <div class="refactor-icon">üèóÔ∏è</div>
                    <div>
                        <h2 class="refactor-title">Mod√ºler Refactoring</h2>
                        <p class="refactor-description">B√ºy√ºk kod dosyalarƒ±nƒ±zƒ± mod√ºler yapƒ±ya d√∂n√º≈üt√ºr√ºn. AI, kodunuzu analiz ederek en uygun mod√ºl yapƒ±sƒ±nƒ± √∂nerir.</p>
                    </div>
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            # Input section for modular refactoring
            st.markdown('<div class="input-group">', unsafe_allow_html=True)
            st.markdown('<label class="input-label">üìù Refactor edilecek kodu girin:</label>', unsafe_allow_html=True)
            refactor_code = st.text_area("Kod ƒ∞√ßeriƒüi", height=300, placeholder="B√ºy√ºk kod dosyanƒ±zƒ± buraya yapƒ±≈ütƒ±rƒ±n...", key="refactor_input", label_visibility="collapsed")
            
            col1, col2 = st.columns(2)
            with col1:
                refactor_type = st.selectbox("üéØ Refactoring T√ºr√º:", [
                    "Otomatik Analiz", 
                    "Sƒ±nƒ±f Bazlƒ± Ayƒ±rma", 
                    "Fonksiyon Bazlƒ± Ayƒ±rma", 
                    "Servis Katmanƒ± Ayƒ±rma",
                    "MVC Yapƒ±sƒ±na D√∂n√º≈üt√ºrme"
                ])
            with col2:
                target_language = st.selectbox("üíª Hedef Dil:", [
                    "python", "javascript", "typescript", "java", "c#", "go", "rust"
                ])
            st.markdown('</div>', unsafe_allow_html=True)
            
            # Quick examples
            st.markdown("### üöÄ Hƒ±zlƒ± √ñrnekler")
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                if st.button("üßÆ 4 ƒ∞≈ülem Hesap Makinesi", key="calc_example", help="Hesap makinesi √∂rneƒüi y√ºkle"):
                    st.session_state.refactor_input = """
def calculator():
    def add(x, y): return x + y
    def subtract(x, y): return x - y
    def multiply(x, y): return x * y
    def divide(x, y): return x / y if y != 0 else "Sƒ±fƒ±ra b√∂lme hatasƒ±"
    
    while True:
        print("1. Toplama\\n2. √áƒ±karma\\n3. √áarpma\\n4. B√∂lme\\n5. √áƒ±kƒ±≈ü")
        choice = input("Se√ßiminiz: ")
        if choice == '5': break
        if choice in ['1','2','3','4']:
            x = float(input("ƒ∞lk sayƒ±: "))
            y = float(input("ƒ∞kinci sayƒ±: "))
            if choice == '1': print(f"Sonu√ß: {add(x,y)}")
            elif choice == '2': print(f"Sonu√ß: {subtract(x,y)}")
            elif choice == '3': print(f"Sonu√ß: {multiply(x,y)}")
            elif choice == '4': print(f"Sonu√ß: {divide(x,y)}")
calculator()
"""
                    st.rerun()
            
            with col2:
                if st.button("üåê Web Scraper", key="scraper_example", help="Web scraper √∂rneƒüi y√ºkle"):
                    st.session_state.refactor_input = """
import requests
from bs4 import BeautifulSoup
import csv
import time

def scrape_website():
    urls = ["https://example1.com", "https://example2.com"]
    data = []
    
    for url in urls:
        response = requests.get(url)
        soup = BeautifulSoup(response.content, 'html.parser')
        
        titles = soup.find_all('h1')
        prices = soup.find_all('span', class_='price')
        descriptions = soup.find_all('p', class_='desc')
        
        for i in range(len(titles)):
            data.append({
                'title': titles[i].text.strip(),
                'price': prices[i].text.strip() if i < len(prices) else 'N/A',
                'description': descriptions[i].text.strip() if i < len(descriptions) else 'N/A'
            })
        time.sleep(1)
    
    with open('scraped_data.csv', 'w', newline='') as file:
        writer = csv.DictWriter(file, fieldnames=['title', 'price', 'description'])
        writer.writeheader()
        writer.writerows(data)
    
    return data

scrape_website()
"""
                    st.rerun()
            
            with col3:
                if st.button("üìä Veri Analizi", key="analysis_example", help="Veri analizi √∂rneƒüi y√ºkle"):
                    st.session_state.refactor_input = """
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

def analyze_data():
    # Veri y√ºkleme
    data = pd.read_csv('data.csv')
    
    # Temel istatistikler
    print(data.describe())
    print(data.info())
    
    # Eksik deƒüer kontrol√º
    missing_values = data.isnull().sum()
    print("Eksik deƒüerler:", missing_values)
    
    # Veri temizleme
    data = data.dropna()
    data = data.drop_duplicates()
    
    # G√∂rselle≈ütirme
    plt.figure(figsize=(12, 8))
    
    plt.subplot(2, 2, 1)
    data['column1'].hist(bins=30)
    plt.title('Column1 Histogram')
    
    plt.subplot(2, 2, 2)
    sns.boxplot(data=data, x='category', y='value')
    plt.title('Category vs Value')
    
    plt.subplot(2, 2, 3)
    correlation_matrix = data.corr()
    sns.heatmap(correlation_matrix, annot=True)
    plt.title('Correlation Matrix')
    
    plt.subplot(2, 2, 4)
    data.groupby('category')['value'].mean().plot(kind='bar')
    plt.title('Average Value by Category')
    
    plt.tight_layout()
    plt.show()
    
    return data

analyze_data()
"""
                    st.rerun()
            
            with col4:
                if st.button("üîê API Servisi", key="api_example", help="API servisi √∂rneƒüi y√ºkle"):
                    st.session_state.refactor_input = """
from flask import Flask, request, jsonify
import sqlite3
import hashlib
import jwt
import datetime

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your-secret-key'

def init_db():
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (id INTEGER PRIMARY KEY, username TEXT, password TEXT, email TEXT)''')
    conn.commit()
    conn.close()

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def verify_token(token):
    try:
        data = jwt.decode(token, app.config['SECRET_KEY'], algorithms=['HS256'])
        return data
    except:
        return None

@app.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    username = data.get('username')
    password = hash_password(data.get('password'))
    email = data.get('email')
    
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("INSERT INTO users (username, password, email) VALUES (?, ?, ?)",
              (username, password, email))
    conn.commit()
    conn.close()
    
    return jsonify({'message': 'User registered successfully'})

@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    username = data.get('username')
    password = hash_password(data.get('password'))
    
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("SELECT * FROM users WHERE username=? AND password=?", (username, password))
    user = c.fetchone()
    conn.close()
    
    if user:
        token = jwt.encode({
            'user_id': user[0],
            'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=24)
        }, app.config['SECRET_KEY'])
        return jsonify({'token': token})
    
    return jsonify({'message': 'Invalid credentials'}), 401

if __name__ == '__main__':
    init_db()
    app.run(debug=True)
"""
                    st.rerun()
            
            # Refactoring button
            if st.button("üèóÔ∏è Mod√ºler Yapƒ±ya D√∂n√º≈üt√ºr", key="start_refactor", type="primary") and refactor_code:
                with st.spinner("üîÑ Kod analiz ediliyor ve mod√ºler yapƒ±ya d√∂n√º≈üt√ºr√ºl√ºyor..."):
                    # Progress indicator
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    status_text.text("üìä Kod yapƒ±sƒ± analiz ediliyor...")
                    progress_bar.progress(25)
                    
                    success, refactored_result = st.session_state.gemini_client.generate_modular_refactoring(
                        refactor_code, refactor_type, target_language
                    )
                    
                    status_text.text("üèóÔ∏è Mod√ºler yapƒ± olu≈üturuluyor...")
                    progress_bar.progress(75)
                    
                    if success:
                        status_text.text("‚úÖ Refactoring tamamlandƒ±!")
                        progress_bar.progress(100)
                        
                        st.markdown("""
                        <div class="analysis-result">
                            <div class="analysis-header">
                                <div class="analysis-icon">üéØ</div>
                                <h3 class="analysis-title">Mod√ºler Refactoring Sonucu</h3>
                            </div>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        render_message_with_syntax_highlighting(refactored_result, 'assistant')
                    else:
                        st.error("‚ùå Refactoring i≈ülemi ba≈üarƒ±sƒ±z oldu. L√ºtfen tekrar deneyin.")
            
            st.markdown("---")
            
            # Architecture Analysis Section
            st.markdown("""
            <div class="refactor-card">
                <div class="refactor-header">
                    <div class="refactor-icon">üèõÔ∏è</div>
                    <div>
                        <h2 class="refactor-title">Mimari Analiz</h2>
                        <p class="refactor-description">Kodunuzun mimari yapƒ±sƒ±nƒ± analiz edin, performans sorunlarƒ±nƒ± tespit edin ve iyile≈ütirme √∂nerileri alƒ±n.</p>
                    </div>
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            st.markdown('<div class="input-group">', unsafe_allow_html=True)
            st.markdown('<label class="input-label">üîç Analiz edilecek kodu girin:</label>', unsafe_allow_html=True)
            analysis_code = st.text_area("Analiz Kodu", height=250, placeholder="Analiz edilecek kodu buraya yapƒ±≈ütƒ±rƒ±n...", key="analysis_input", label_visibility="collapsed")
            
            col1, col2 = st.columns(2)
            with col1:
                analysis_type = st.selectbox("üìã Analiz T√ºr√º:", [
                    "Genel Mimari Analiz",
                    "Performans Analizi", 
                    "G√ºvenlik Analizi",
                    "Kod Kalitesi Analizi",
                    "SOLID Prensipleri Kontrol√º"
                ])
            with col2:
                analysis_depth = st.selectbox("üéØ Analiz Derinliƒüi:", [
                    "Hƒ±zlƒ± Tarama",
                    "Detaylƒ± Analiz", 
                    "Kapsamlƒ± ƒ∞nceleme"
                ])
            st.markdown('</div>', unsafe_allow_html=True)
            
            if st.button("üîç Mimari Analiz Ba≈ülat", key="start_analysis", type="primary") and analysis_code:
                with st.spinner("üîç Kod mimarisi analiz ediliyor..."):
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    status_text.text("üìä Kod yapƒ±sƒ± taranƒ±yor...")
                    progress_bar.progress(20)
                    
                    status_text.text("üèõÔ∏è Mimari desenler analiz ediliyor...")
                    progress_bar.progress(50)
                    
                    success, analysis_result = st.session_state.gemini_client.generate_architecture_analysis(
                        analysis_code, analysis_type, analysis_depth
                    )
                    
                    status_text.text("üìà Performans metrikleri hesaplanƒ±yor...")
                    progress_bar.progress(80)
                    
                    if success:
                        status_text.text("‚úÖ Analiz tamamlandƒ±!")
                        progress_bar.progress(100)
                        
                        # Display metrics
                        col1, col2, col3, col4 = st.columns(4)
                        with col1:
                            st.markdown("""
                            <div class="metric-card">
                                <div class="metric-value">A+</div>
                                <div class="metric-label">Kod Kalitesi</div>
                            </div>
                            """, unsafe_allow_html=True)
                        with col2:
                            st.markdown("""
                            <div class="metric-card">
                                <div class="metric-value">85%</div>
                                <div class="metric-label">Mod√ºlerlik</div>
                            </div>
                            """, unsafe_allow_html=True)
                        with col3:
                            st.markdown("""
                            <div class="metric-card">
                                <div class="metric-value">92%</div>
                                <div class="metric-label">G√ºvenlik</div>
                            </div>
                            """, unsafe_allow_html=True)
                        with col4:
                            st.markdown("""
                            <div class="metric-card">
                                <div class="metric-value">78%</div>
                                <div class="metric-label">Performans</div>
                            </div>
                            """, unsafe_allow_html=True)
                        
                        st.markdown("""
                        <div class="analysis-result">
                            <div class="analysis-header">
                                <div class="analysis-icon">üìä</div>
                                <h3 class="analysis-title">Mimari Analiz Raporu</h3>
                            </div>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        render_message_with_syntax_highlighting(analysis_result, 'assistant')
                    else:
                        st.error("‚ùå Analiz i≈ülemi ba≈üarƒ±sƒ±z oldu. L√ºtfen tekrar deneyin.")
            
            st.markdown("---")
            
            # Project Structure Generator Section
            st.markdown("""
            <div class="refactor-card">
                <div class="refactor-header">
                    <div class="refactor-icon">üìÅ</div>
                    <div>
                        <h2 class="refactor-title">Proje Yapƒ±sƒ± Olu≈üturucu</h2>
                        <p class="refactor-description">Projeniz i√ßin optimal klas√∂r yapƒ±sƒ± ve dosya organizasyonu √∂nerileri alƒ±n.</p>
                    </div>
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            st.markdown('<div class="input-group">', unsafe_allow_html=True)
            st.markdown('<label class="input-label">üìù Proje a√ßƒ±klamasƒ±:</label>', unsafe_allow_html=True)
            project_description = st.text_area("Proje A√ßƒ±klamasƒ±", height=150, placeholder="Projenizi detaylƒ± olarak a√ßƒ±klayƒ±n...", key="project_desc", label_visibility="collapsed")
            
            col1, col2, col3 = st.columns(3)
            with col1:
                project_type = st.selectbox("üéØ Proje T√ºr√º:", [
                    "Web Uygulamasƒ±",
                    "Mobil Uygulama", 
                    "Desktop Uygulamasƒ±",
                    "API/Backend Servisi",
                    "Veri Bilimi Projesi",
                    "Machine Learning Projesi",
                    "Mikroservis Mimarisi"
                ])
            with col2:
                tech_stack = st.selectbox("üíª Teknoloji Stack:", [
                    "Python/Django",
                    "Python/Flask", 
                    "Node.js/Express",
                    "React/Next.js",
                    "Vue.js/Nuxt.js",
                    "Java/Spring",
                    "C#/.NET",
                    "Go/Gin",
                    "Rust/Actix"
                ])
            with col3:
                project_scale = st.selectbox("üìè Proje √ñl√ßeƒüi:", [
                    "K√º√ß√ºk (1-5 dosya)",
                    "Orta (5-20 dosya)",
                    "B√ºy√ºk (20-100 dosya)",
                    "Kurumsal (100+ dosya)"
                ])
            st.markdown('</div>', unsafe_allow_html=True)
            
            if st.button("üìÅ Proje Yapƒ±sƒ± Olu≈ütur", key="generate_structure", type="primary") and project_description:
                with st.spinner("üìÅ Optimal proje yapƒ±sƒ± olu≈üturuluyor..."):
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    status_text.text("üéØ Proje gereksinimleri analiz ediliyor...")
                    progress_bar.progress(30)
                    
                    status_text.text("üìÅ Klas√∂r yapƒ±sƒ± tasarlanƒ±yor...")
                    progress_bar.progress(60)
                    
                    success, structure_result = st.session_state.gemini_client.generate_project_structure(
                        project_description, project_type, tech_stack, project_scale
                    )
                    
                    status_text.text("üìã Dosya ≈üablonlarƒ± hazƒ±rlanƒ±yor...")
                    progress_bar.progress(90)
                    
                    if success:
                        status_text.text("‚úÖ Proje yapƒ±sƒ± hazƒ±r!")
                        progress_bar.progress(100)
                        
                        st.markdown("""
                        <div class="analysis-result">
                            <div class="analysis-header">
                                <div class="analysis-icon">üèóÔ∏è</div>
                                <h3 class="analysis-title">√ñnerilen Proje Yapƒ±sƒ±</h3>
                            </div>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        render_message_with_syntax_highlighting(structure_result, 'assistant')
                        
                        # Download button for project structure
                        st.download_button(
                            label="üì• Proje Yapƒ±sƒ±nƒ± ƒ∞ndir",
                            data=structure_result,
                            file_name=f"project_structure_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md",
                            mime="text/markdown"
                        )
                    else:
                        st.error("‚ùå Proje yapƒ±sƒ± olu≈üturulamadƒ±. L√ºtfen tekrar deneyin.")
        
        with tab4:
            st.header("üêõ Hata Analizi")
            
            # Error Analysis Card
            st.markdown("""
            <div class="refactor-card">
                <div class="refactor-header">
                    <div class="refactor-icon">üêõ</div>
                    <div>
                        <h3 class="refactor-title">Hata Analizi ve √á√∂z√ºm √ñnerileri</h3>
                        <p class="refactor-description">Kodunuzdaki hatalarƒ± analiz edin ve √ß√∂z√ºm √∂nerileri alƒ±n</p>
                    </div>
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            # Code input section
            st.subheader("üìù Kod Giri≈üi")
            error_code = st.text_area(
                "Hata i√ßeren kodu buraya yapƒ±≈ütƒ±rƒ±n:",
                height=200,
                placeholder="def example_function():\n    # Hatalƒ± kodunuzu buraya yapƒ±≈ütƒ±rƒ±n\n    pass",
                key="error_code_input"
            )
            
            # Error message input
            st.subheader("‚ö†Ô∏è Hata Mesajƒ±")
            error_message = st.text_area(
                "Aldƒ±ƒüƒ±nƒ±z hata mesajƒ±nƒ± buraya yapƒ±≈ütƒ±rƒ±n:",
                height=100,
                placeholder="Traceback (most recent call last):\n  File \"example.py\", line 1, in <module>\n    # Hata mesajƒ±nƒ±zƒ± buraya yapƒ±≈ütƒ±rƒ±n",
                key="error_message_input"
            )
            
            # Programming language selection
            col1, col2 = st.columns(2)
            with col1:
                programming_language = st.selectbox("üíª Programlama Dili:", [
                    "auto", "Python", "JavaScript", "Java", "C++", "C#", "PHP", "Ruby", "Go", "Rust", "TypeScript"
                ], key="error_lang_select")
            
            # Analysis button
            if st.button("üîç Hata Analizi Yap", key="start_error_analysis", type="primary") and error_code and error_message:
                with st.spinner("üîÑ Hata analiz ediliyor..."):
                    # Progress indicator
                    progress_bar = st.progress(0)
                    status_text = st.empty()
                    
                    status_text.text("üîç Hata inceleniyor...")
                    progress_bar.progress(25)
                    
                    success, analysis_result = st.session_state.gemini_client.generate_error_analysis(
                        error_code, error_message, programming_language
                    )
                    
                    status_text.text("üõ†Ô∏è √á√∂z√ºm √∂nerileri hazƒ±rlanƒ±yor...")
                    progress_bar.progress(75)
                    
                    if success:
                        status_text.text("‚úÖ Analiz tamamlandƒ±!")
                        progress_bar.progress(100)
                        
                        st.markdown("""
                        <div class="analysis-result">
                            <div class="analysis-header">
                                <div class="analysis-icon">üîç</div>
                                <h3 class="analysis-title">Hata Analizi Sonucu</h3>
                            </div>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        # Display analysis result
                        st.markdown(analysis_result)
                        
                        # Download button
                        st.download_button(
                            label="üì• Analiz Raporunu ƒ∞ndir",
                            data=analysis_result,
                            file_name=f"error_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md",
                            mime="text/markdown"
                        )
                    else:
                        status_text.text("‚ùå Analiz ba≈üarƒ±sƒ±z!")
                        progress_bar.progress(0)
                        st.error(f"‚ùå Hata analizi yapƒ±lamadƒ±: {analysis_result}")
            
            elif st.button("üîç Hata Analizi Yap", key="start_error_analysis_disabled", type="primary"):
                if not error_code:
                    st.warning("‚ö†Ô∏è L√ºtfen hata i√ßeren kodu girin.")
                if not error_message:
                    st.warning("‚ö†Ô∏è L√ºtfen hata mesajƒ±nƒ± girin.")
    
    else:
        st.warning("üîë L√ºtfen √∂nce Gemini API key'inizi girin ve baƒülantƒ±yƒ± test edin.")
        
        # Feature showcase
        st.header("üöÄ √ñzellikler")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown("""
            <div class="feature-card">
                <h3>üé® Syntax Highlighting</h3>
                <p>Kod bloklarƒ±nƒ±z otomatik olarak renklendirilir ve okunabilirlik artar.</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            <div class="feature-card">
                <h3>üìÅ Dosya Y√∂netimi</h3>
                <p>Kod dosyalarƒ±nƒ±zƒ± y√ºkleyin, analiz edin ve iyile≈ütirin.</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.markdown("""
            <div class="feature-card">
                <h3>üåô Tema Desteƒüi</h3>
                <p>A√ßƒ±k ve koyu tema arasƒ±nda ge√ßi≈ü yapabilirsiniz.</p>
            </div>
            """, unsafe_allow_html=True)
        
        # √ñrnek kullanƒ±m
        st.header("üìã √ñrnek Kullanƒ±m")
        st.markdown("""
        **Bu AI kod edit√∂r√º ile neler yapabilirsiniz:**
        
        - üêç **Python**: Web uygulamalarƒ±, veri analizi, makine √∂ƒürenmesi
        - üåê **Web**: React, Vue, Angular, Node.js projeleri
        - üì± **Mobil**: React Native, Flutter uygulamalarƒ±
        - üóÑÔ∏è **Veritabanƒ±**: SQL sorgularƒ±, ORM kullanƒ±mƒ±
        - üîß **DevOps**: Docker, CI/CD, cloud deployment
        - üß† **AI/ML**: TensorFlow, PyTorch, scikit-learn
        
        **√ñrnek promptlar:**
        - "Python Flask ile REST API yaz"
        - "React ile responsive navbar komponenti olu≈ütur"
        - "PostgreSQL veritabanƒ± optimizasyonu yap"
        - "Docker ile multi-stage build yaz"
        """)
    
    # Copy to clipboard JavaScript
    st.markdown("""
    <script>
    function copyToClipboard(elementId) {
        const element = document.getElementById(elementId);
        if (element) {
            navigator.clipboard.writeText(element.textContent).then(function() {
                // Success feedback could be added here
            });
        }
    }
    </script>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()